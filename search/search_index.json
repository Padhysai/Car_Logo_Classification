{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Car Brand Logo Classification Deep learning has been gaining momentum over last decades: self-driving cars, efficient web search, speech and image recognition, video processing. The successful results gradually propagate into our daily live. Deep learning is a class of artificial intelligence methods, which allows the computer to operate in a self-learning mode, without being explicitly programmed. It is a very interesting and complex topic, which could drive the future of technology. Convolutional Neural Networks Convolutional Neural Networks (ConvNets or CNNs) are a category of Neural Networks that have proven very effective in areas such as image recognition and classification. ConvNets have been successful in identifying faces, objects and traffic signs apart from powering vision in robots and self driving cars. The main task of image classification is acceptance of the input image and the following definition of its class.This is what people learn from their birth.But the computer sees the pictures quite differently: CNN Architecture A Convolutional Neural Network (CNN) is comprised of one or more convolutional layers (often with a subsampling step) and then followed by one or more fully connected layers as in a standard multilayer neural network. The architecture of a CNN is designed to take advantage of the 2D structure of an input image.","title":"Introduction"},{"location":"index.html#car-brand-logo-classification","text":"Deep learning has been gaining momentum over last decades: self-driving cars, efficient web search, speech and image recognition, video processing. The successful results gradually propagate into our daily live. Deep learning is a class of artificial intelligence methods, which allows the computer to operate in a self-learning mode, without being explicitly programmed. It is a very interesting and complex topic, which could drive the future of technology.","title":"Car Brand Logo Classification"},{"location":"index.html#convolutional-neural-networks","text":"Convolutional Neural Networks (ConvNets or CNNs) are a category of Neural Networks that have proven very effective in areas such as image recognition and classification. ConvNets have been successful in identifying faces, objects and traffic signs apart from powering vision in robots and self driving cars. The main task of image classification is acceptance of the input image and the following definition of its class.This is what people learn from their birth.But the computer sees the pictures quite differently:","title":"Convolutional Neural Networks"},{"location":"index.html#cnn-architecture","text":"A Convolutional Neural Network (CNN) is comprised of one or more convolutional layers (often with a subsampling step) and then followed by one or more fully connected layers as in a standard multilayer neural network. The architecture of a CNN is designed to take advantage of the 2D structure of an input image.","title":"CNN Architecture"},{"location":"page1.html","text":"CNN Basics Convolutional layer The Convolutional layer is the key component of CNN and always the first layer of the CNN. its purpose is to detect the presence of set of features in the images received as an input. and this is done by convolutional filtering. Pooling Layer This type of layer often placed between two layers of convolution. it receives several feature maps and applies the pooling operation to each of them. pooling operation will reduce the size of image while preserving their important features. pooling layer reduces number of parameters in the network. it improves the efficiency of the network and avoids over learning. strides Stride is the number of pixels shifts over the input matrix. When the stride is 1 then we move the filters to 1 pixel at a time. When the stride is 2 then we move the filters to 2 pixels at a time and so on. The below figure shows convolution would work with a stride of 2. Padding Sometimes filter does not fit perfectly fit the input image. We have two options: Pad the picture with zeros (zero-padding) so that it fits Drop the part of the image where the filter did not fit. This is called valid padding which keeps only valid part of the image.","title":"CNN Basics"},{"location":"page1.html#cnn-basics","text":"","title":"CNN Basics"},{"location":"page1.html#convolutional-layer","text":"The Convolutional layer is the key component of CNN and always the first layer of the CNN. its purpose is to detect the presence of set of features in the images received as an input. and this is done by convolutional filtering.","title":"Convolutional layer"},{"location":"page1.html#pooling-layer","text":"This type of layer often placed between two layers of convolution. it receives several feature maps and applies the pooling operation to each of them. pooling operation will reduce the size of image while preserving their important features. pooling layer reduces number of parameters in the network. it improves the efficiency of the network and avoids over learning.","title":"Pooling Layer"},{"location":"page1.html#strides","text":"Stride is the number of pixels shifts over the input matrix. When the stride is 1 then we move the filters to 1 pixel at a time. When the stride is 2 then we move the filters to 2 pixels at a time and so on. The below figure shows convolution would work with a stride of 2.","title":"strides"},{"location":"page1.html#padding","text":"Sometimes filter does not fit perfectly fit the input image. We have two options: Pad the picture with zeros (zero-padding) so that it fits Drop the part of the image where the filter did not fit. This is called valid padding which keeps only valid part of the image.","title":"Padding"},{"location":"page2.html","text":"Project Overview The main aim of this project is to classify the different brands by their logo. here we are using the Pretrained models provided by Keras. by using VGG16 model we will do the classification of logos. Dataset info I used images of 10 classes and each class consists of 1000 images for training and 200 images for testing with different augmentation techniques to make my model robust. Names of the classes: Buick Chery Citroen Honda Hyundai Lexus Mazda Peugeot Toyota Volkswagen Training Parameters Training Data : 10,000 images Testing Data : 2000 images GPU : Nvidia P5000 Epochs : 50 Model : VGG 16 Training time : 150 min (approx) Project Layout","title":"Project Overview"},{"location":"page2.html#project-overview","text":"The main aim of this project is to classify the different brands by their logo. here we are using the Pretrained models provided by Keras. by using VGG16 model we will do the classification of logos.","title":"Project Overview"},{"location":"page2.html#dataset-info","text":"I used images of 10 classes and each class consists of 1000 images for training and 200 images for testing with different augmentation techniques to make my model robust. Names of the classes: Buick Chery Citroen Honda Hyundai Lexus Mazda Peugeot Toyota Volkswagen","title":"Dataset info"},{"location":"page2.html#training-parameters","text":"Training Data : 10,000 images Testing Data : 2000 images GPU : Nvidia P5000 Epochs : 50 Model : VGG 16 Training time : 150 min (approx)","title":"Training Parameters"},{"location":"page2.html#project-layout","text":"","title":"Project Layout"},{"location":"page3.html","text":"Training Process Importing necessary libraries Importing from Keras to bulid model and training and from numpy to matrix multiplications and matplotlib for plotting graphs. from tensorflow.keras.layers import Input, Lambda, Dense, Flatten from tensorflow.keras.models import Model from keras.applications.vgg16 import VGG16 from tensorflow.keras.applications.resnet50 import preprocess_input from tensorflow.keras.preprocessing import image from tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img from tensorflow.keras.models import Sequential import numpy as np from glob import glob import matplotlib.pyplot as plt import a pre-trained model by using transfer learning technique # This code will work with only Tensorflow > 2.0 versions. # Check the version of the Tensorflow import tensorflow tensorflow.__version__ # fixing Input image size and training dir paths. IMAGE_SIZE = [70, 70] train_path = 'car_logo/TrainingData' valid_path = 'car_logo/TestingData' # import a pre-trained model by using transfer learning technique. vgg16 = VGG16(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False) for layer in vgg16.layers: layer.trainable = False # Check how many classes you have folders = glob('car_logo/TrainingData/*') len(folders) Creating model # flatten layer x = Flatten()(vgg16.output) # Dense layer prediction = Dense(len(folders), activation='softmax')(x) # Creating a model vgg16_model = Model(inputs=vgg16.input, outputs=prediction) Model parameters # model parameters vgg16_model.compile( loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'] ) Getting images from Dataset # Use the Image Data Generator to import the images from the dataset from tensorflow.keras.preprocessing.image import ImageDataGenerator train_datagen = ImageDataGenerator(rescale = 1./255) test_datagen = ImageDataGenerator(rescale = 1./255) # Make sure you provide the same target size as initialied for the image size training_set = train_datagen.flow_from_directory(train_path, target_size = (70, 70), batch_size = 32, class_mode = 'categorical') test_set = test_datagen.flow_from_directory(valid_path, target_size = (70, 70), batch_size = 32, class_mode = 'categorical') Training model = vgg16_model.fit_generator( training_set, validation_data=test_set, epochs=50, steps_per_epoch=len(training_set), validation_steps=len(test_set) )","title":"Training Process"},{"location":"page3.html#training-process","text":"","title":"Training Process"},{"location":"page3.html#importing-necessary-libraries","text":"Importing from Keras to bulid model and training and from numpy to matrix multiplications and matplotlib for plotting graphs. from tensorflow.keras.layers import Input, Lambda, Dense, Flatten from tensorflow.keras.models import Model from keras.applications.vgg16 import VGG16 from tensorflow.keras.applications.resnet50 import preprocess_input from tensorflow.keras.preprocessing import image from tensorflow.keras.preprocessing.image import ImageDataGenerator,load_img from tensorflow.keras.models import Sequential import numpy as np from glob import glob import matplotlib.pyplot as plt","title":"Importing necessary libraries"},{"location":"page3.html#import-a-pre-trained-model-by-using-transfer-learning-technique","text":"# This code will work with only Tensorflow > 2.0 versions. # Check the version of the Tensorflow import tensorflow tensorflow.__version__ # fixing Input image size and training dir paths. IMAGE_SIZE = [70, 70] train_path = 'car_logo/TrainingData' valid_path = 'car_logo/TestingData' # import a pre-trained model by using transfer learning technique. vgg16 = VGG16(input_shape=IMAGE_SIZE + [3], weights='imagenet', include_top=False) for layer in vgg16.layers: layer.trainable = False # Check how many classes you have folders = glob('car_logo/TrainingData/*') len(folders)","title":"import a pre-trained model by using transfer learning technique"},{"location":"page3.html#creating-model","text":"# flatten layer x = Flatten()(vgg16.output) # Dense layer prediction = Dense(len(folders), activation='softmax')(x) # Creating a model vgg16_model = Model(inputs=vgg16.input, outputs=prediction)","title":"Creating model"},{"location":"page3.html#model-parameters","text":"# model parameters vgg16_model.compile( loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'] )","title":"Model parameters"},{"location":"page3.html#getting-images-from-dataset","text":"# Use the Image Data Generator to import the images from the dataset from tensorflow.keras.preprocessing.image import ImageDataGenerator train_datagen = ImageDataGenerator(rescale = 1./255) test_datagen = ImageDataGenerator(rescale = 1./255) # Make sure you provide the same target size as initialied for the image size training_set = train_datagen.flow_from_directory(train_path, target_size = (70, 70), batch_size = 32, class_mode = 'categorical') test_set = test_datagen.flow_from_directory(valid_path, target_size = (70, 70), batch_size = 32, class_mode = 'categorical')","title":"Getting images from Dataset"},{"location":"page3.html#training","text":"model = vgg16_model.fit_generator( training_set, validation_data=test_set, epochs=50, steps_per_epoch=len(training_set), validation_steps=len(test_set) )","title":"Training"},{"location":"page4.html","text":"Flask App HTML files home.html <!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Car logo classification</title> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"> <link href=\"https://cdn.bootcss.com/bootstrap/4.0.0/css/bootstrap.min.css\" rel=\"stylesheet\"> <script src=\"https://cdn.bootcss.com/popper.js/1.12.9/umd/popper.min.js\"></script> <script src=\"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js\"></script> <script src=\"https://cdn.bootcss.com/bootstrap/4.0.0/js/bootstrap.min.js\"></script> <link href=\"{{ url_for('static', filename='css/style.css') }}\" rel=\"stylesheet\"> <script src=\"{{ url_for('static', filename='js/script.js') }}\" type=\"text/javascript\"></script> </head> <body> <nav class=\"navbar navbar-inverse\"> <div class=\"container\"> <a class=\"navbar-brand\" href=\"#\">Car logo classification</a> <button class=\"btn btn-outline-secondary my-2 my-sm-0\" type=\"submit\">Help</button> </div> </nav> <div class=\"container\"> <div id=\"content\" style=\"margin-top:2em\">{% block content %}{% endblock %}</div> </div> </body> </html> predict.html {% extends \"home.html\" %} {% block content %} <h2>Car Logo Classifier</h2> <div> <form id=\"upload-file\" method=\"post\" enctype=\"multipart/form-data\"> <label for=\"imageUpload\" class=\"upload-label\"> Choose... </label> <input type=\"file\" name=\"file\" id=\"imageUpload\" accept=\".png, .jpg, .jpeg\"> </form> <div class=\"image-section\" style=\"display:none;\"> <div class=\"img-preview\"> <div id=\"imagePreview\"> </div> </div> <div> <button type=\"button\" class=\"btn btn-primary btn-lg \" id=\"btn-predict\">Predict!</button> </div> </div> <div class=\"loader\" style=\"display:none;\"></div> <h3 id=\"result\"> <span> </span> </h3> </div> {% endblock %}","title":"Flask App"},{"location":"page4.html#flask-app","text":"","title":"Flask App"},{"location":"page4.html#html-files","text":"","title":"HTML files"},{"location":"page4.html#homehtml","text":"<!DOCTYPE html> <html lang=\"en\"> <head> <meta charset=\"UTF-8\"> <title>Car logo classification</title> <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"> <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\"> <link href=\"https://cdn.bootcss.com/bootstrap/4.0.0/css/bootstrap.min.css\" rel=\"stylesheet\"> <script src=\"https://cdn.bootcss.com/popper.js/1.12.9/umd/popper.min.js\"></script> <script src=\"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js\"></script> <script src=\"https://cdn.bootcss.com/bootstrap/4.0.0/js/bootstrap.min.js\"></script> <link href=\"{{ url_for('static', filename='css/style.css') }}\" rel=\"stylesheet\"> <script src=\"{{ url_for('static', filename='js/script.js') }}\" type=\"text/javascript\"></script> </head> <body> <nav class=\"navbar navbar-inverse\"> <div class=\"container\"> <a class=\"navbar-brand\" href=\"#\">Car logo classification</a> <button class=\"btn btn-outline-secondary my-2 my-sm-0\" type=\"submit\">Help</button> </div> </nav> <div class=\"container\"> <div id=\"content\" style=\"margin-top:2em\">{% block content %}{% endblock %}</div> </div> </body> </html>","title":"home.html"},{"location":"page4.html#predicthtml","text":"{% extends \"home.html\" %} {% block content %} <h2>Car Logo Classifier</h2> <div> <form id=\"upload-file\" method=\"post\" enctype=\"multipart/form-data\"> <label for=\"imageUpload\" class=\"upload-label\"> Choose... </label> <input type=\"file\" name=\"file\" id=\"imageUpload\" accept=\".png, .jpg, .jpeg\"> </form> <div class=\"image-section\" style=\"display:none;\"> <div class=\"img-preview\"> <div id=\"imagePreview\"> </div> </div> <div> <button type=\"button\" class=\"btn btn-primary btn-lg \" id=\"btn-predict\">Predict!</button> </div> </div> <div class=\"loader\" style=\"display:none;\"></div> <h3 id=\"result\"> <span> </span> </h3> </div> {% endblock %}","title":"predict.html"},{"location":"page5.html","text":"Flask App JavaScript $(document).ready(function () { // Init $('.image-section').hide(); $('.loader').hide(); $('#result').hide(); // Upload Preview function readURL(input) { if (input.files && input.files[0]) { var reader = new FileReader(); reader.onload = function (e) { $('#imagePreview').css('background-image', 'url(' + e.target.result + ')'); $('#imagePreview').hide(); $('#imagePreview').fadeIn(650); } reader.readAsDataURL(input.files[0]); } } $(\"#imageUpload\").change(function () { $('.image-section').show(); $('#btn-predict').show(); $('#result').text(''); $('#result').hide(); readURL(this); }); // Predict $('#btn-predict').click(function () { var form_data = new FormData($('#upload-file')[0]); // Show loading animation $(this).hide(); $('.loader').show(); // Make prediction by calling api /predict $.ajax({ type: 'POST', url: '/predict', data: form_data, contentType: false, cache: false, processData: false, async: true, success: function (data) { // Get and display the result $('.loader').hide(); $('#result').fadeIn(600); $('#result').text(' This Logo belongs to ' + data); console.log('Success!'); }, }); }); });","title":"Flask App(cont)"},{"location":"page5.html#flask-app","text":"","title":"Flask App"},{"location":"page5.html#javascript","text":"$(document).ready(function () { // Init $('.image-section').hide(); $('.loader').hide(); $('#result').hide(); // Upload Preview function readURL(input) { if (input.files && input.files[0]) { var reader = new FileReader(); reader.onload = function (e) { $('#imagePreview').css('background-image', 'url(' + e.target.result + ')'); $('#imagePreview').hide(); $('#imagePreview').fadeIn(650); } reader.readAsDataURL(input.files[0]); } } $(\"#imageUpload\").change(function () { $('.image-section').show(); $('#btn-predict').show(); $('#result').text(''); $('#result').hide(); readURL(this); }); // Predict $('#btn-predict').click(function () { var form_data = new FormData($('#upload-file')[0]); // Show loading animation $(this).hide(); $('.loader').show(); // Make prediction by calling api /predict $.ajax({ type: 'POST', url: '/predict', data: form_data, contentType: false, cache: false, processData: false, async: true, success: function (data) { // Get and display the result $('.loader').hide(); $('#result').fadeIn(600); $('#result').text(' This Logo belongs to ' + data); console.log('Success!'); }, }); }); });","title":"JavaScript"},{"location":"page6.html","text":"Flask App main.py \"\"\" Created on Thu Jul 02 23:45:20 2020 @author: SaiPrasad Padhy Version : 1.0 \"\"\" from __future__ import division, print_function import sys import os import glob import re import numpy as np # Import necessery libraries from Keras from tensorflow.keras.applications.imagenet_utils import preprocess_input, decode_predictions from tensorflow.keras.models import load_model from tensorflow.keras.preprocessing import image # Flask utils from flask import Flask, redirect, url_for, request, render_template from werkzeug.utils import secure_filename app = Flask(__name__) # Define path for trained model MODEL_PATH ='vgg16_model.h5' # Load the trained model model = load_model(MODEL_PATH) def model_predict(img_path, model): img = image.load_img(img_path, target_size=(70, 70)) # Preprocessing the image test_image = image.img_to_array(img) test_image = np.expand_dims(test_image, axis=0) result = model.predict(test_image) preds = np.argmax(result[0]) if preds == 0: preds = \"Buick\" elif preds == 1: preds = \"Chery\" elif preds == 2: preds = \"Citroen\" elif preds == 3: preds = \"Honda\" elif preds == 4: preds = \"Hyundai\" elif preds == 5: preds = \"Lexus\" elif preds == 6: preds = \"Mazda\" elif preds == 7: preds = \"Peugeot\" elif preds == 8: preds = \"Toyota\" else: preds = \"Volkswagen\" return preds @app.route('/', methods=['GET']) def index(): # Main page return render_template('predict.html') @app.route('/predict', methods=['GET', 'POST']) def upload(): if request.method == 'POST': # Get the file from post request f = request.files['file'] # Save the file to ./uploads basepath = os.path.dirname(__file__) file_path = os.path.join( basepath, 'uploads', secure_filename(f.filename)) f.save(file_path) # Make prediction preds = model_predict(file_path, model) result=preds return result return None if __name__ == '__main__': app.run(debug=True)","title":"Flask App(cont)"},{"location":"page6.html#flask-app","text":"","title":"Flask App"},{"location":"page6.html#mainpy","text":"\"\"\" Created on Thu Jul 02 23:45:20 2020 @author: SaiPrasad Padhy Version : 1.0 \"\"\" from __future__ import division, print_function import sys import os import glob import re import numpy as np # Import necessery libraries from Keras from tensorflow.keras.applications.imagenet_utils import preprocess_input, decode_predictions from tensorflow.keras.models import load_model from tensorflow.keras.preprocessing import image # Flask utils from flask import Flask, redirect, url_for, request, render_template from werkzeug.utils import secure_filename app = Flask(__name__) # Define path for trained model MODEL_PATH ='vgg16_model.h5' # Load the trained model model = load_model(MODEL_PATH) def model_predict(img_path, model): img = image.load_img(img_path, target_size=(70, 70)) # Preprocessing the image test_image = image.img_to_array(img) test_image = np.expand_dims(test_image, axis=0) result = model.predict(test_image) preds = np.argmax(result[0]) if preds == 0: preds = \"Buick\" elif preds == 1: preds = \"Chery\" elif preds == 2: preds = \"Citroen\" elif preds == 3: preds = \"Honda\" elif preds == 4: preds = \"Hyundai\" elif preds == 5: preds = \"Lexus\" elif preds == 6: preds = \"Mazda\" elif preds == 7: preds = \"Peugeot\" elif preds == 8: preds = \"Toyota\" else: preds = \"Volkswagen\" return preds @app.route('/', methods=['GET']) def index(): # Main page return render_template('predict.html') @app.route('/predict', methods=['GET', 'POST']) def upload(): if request.method == 'POST': # Get the file from post request f = request.files['file'] # Save the file to ./uploads basepath = os.path.dirname(__file__) file_path = os.path.join( basepath, 'uploads', secure_filename(f.filename)) f.save(file_path) # Make prediction preds = model_predict(file_path, model) result=preds return result return None if __name__ == '__main__': app.run(debug=True)","title":"main.py"},{"location":"page7.html","text":"Heroku Deployment Steps before Deployment Add a file called 'gitignore' inside the project folder. This file contains the list of the files which we dont want to include in git repository. .idea Add a file called 'Procfile' inside the project folder this folder contiins command to run the flask application once deployed on the server. web: gunicorn app:app Open the command prompt and navigate to project folder. Enter \"pip freeze > requirements.txt\" this will generate the requirements.txt file. pip freeze > requirements.txt requirements.txt file helps the cloud app to install all the dependencies before starting the webserver.","title":"Deployment"},{"location":"page7.html#heroku-deployment","text":"","title":"Heroku Deployment"},{"location":"page7.html#steps-before-deployment","text":"Add a file called 'gitignore' inside the project folder. This file contains the list of the files which we dont want to include in git repository. .idea Add a file called 'Procfile' inside the project folder this folder contiins command to run the flask application once deployed on the server. web: gunicorn app:app Open the command prompt and navigate to project folder. Enter \"pip freeze > requirements.txt\" this will generate the requirements.txt file. pip freeze > requirements.txt requirements.txt file helps the cloud app to install all the dependencies before starting the webserver.","title":"Steps before Deployment"},{"location":"page8.html","text":"Heroku Deployment Heroku is a platform as a service (PaaS) that enables developers to build, run, and operate applications entirely in the cloud. Open Heroku Cloud go to \"https://id.heroku.com/login\" and login to the Heroku. its completely free Create a new app Connect to Github Select a Github Repo Deploy","title":"Heroku Deployment"},{"location":"page8.html#heroku-deployment","text":"Heroku is a platform as a service (PaaS) that enables developers to build, run, and operate applications entirely in the cloud.","title":"Heroku Deployment"},{"location":"page8.html#open-heroku-cloud","text":"go to \"https://id.heroku.com/login\" and login to the Heroku. its completely free","title":"Open Heroku Cloud"},{"location":"page8.html#create-a-new-app","text":"","title":"Create a new app"},{"location":"page8.html#connect-to-github","text":"","title":"Connect to Github"},{"location":"page8.html#select-a-github-repo","text":"","title":"Select a Github Repo"},{"location":"page8.html#deploy","text":"","title":"Deploy"},{"location":"page9.html","text":"Output References CNN Deployment tutorial by INeuron.ai VGG 16 research paper Keras Applications DataScience Tutorials by Krish Naik","title":"Output"},{"location":"page9.html#output","text":"","title":"Output"},{"location":"page9.html#references","text":"CNN Deployment tutorial by INeuron.ai VGG 16 research paper Keras Applications DataScience Tutorials by Krish Naik","title":"References"}]}